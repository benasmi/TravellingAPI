<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.travel.travelapi.services.ExplorePageService">

    <update id="update">
        DELETE FROM EXPLORE_PAGE WHERE 1;
        <foreach collection="recommendations" item="recommendationId">
            INSERT INTO `EXPLORE_PAGE`(`fk_recommendationId`) VALUES (#{recommendationId});
        </foreach>
    </update>

    <select id="selectAll" resultType="com.travel.travelapi.models.Recommendation">
        SELECT *
        FROM `RECOMMENDATION` recommendation
                 INNER JOIN `EXPLORE_PAGE` explorePage ON recommendation.id = explorePage.fk_recommendationId
        ORDER BY explorePage.id
    </select>


    <select id="selectToursForPlace" resultType="com.travel.travelapi.models.Tour">
        SELECT td.fk_tourId as tourId, ptd.fk_tourDayId
        FROM PLACE_TOUR_DAY ptd
                 INNER JOIN TOUR_DAY td ON td.tourDayId = ptd.fk_tourDayId
        WHERE fk_placeId = #{placeId}
        LIMIT 8
    </select>

    <select id="matchSearch" resultType="com.travel.travelapi.models.SearchResultRegion">
        (SELECT DISTINCT NULL as county, NULL as country, city, NULL as municipality
         FROM PLACE
         WHERE MATCH(city) AGAINST(CONCAT(#{keyword}, '*') IN BOOLEAN MODE)
         LIMIT 5)
        UNION ALL
        (SELECT DISTINCT NULL as county, NULL as country, NULL as city, municipality
         FROM PLACE
         WHERE MATCH(municipality) AGAINST(CONCAT(#{keyword}, '*') IN BOOLEAN MODE)
         LIMIT 5)
        UNION ALL
        (SELECT DISTINCT county, NULL as country, NULL as city, NULL as municipality
         FROM PLACE
         WHERE MATCH(county) AGAINST(CONCAT(#{keyword}, '*') IN BOOLEAN MODE)
         LIMIT 5)
        UNION ALL
        (SELECT DISTINCT NULL as county, country, NULL as city, NULL as municipality
         FROM PLACE
         WHERE MATCH(country) AGAINST(CONCAT(#{keyword}, '*') IN BOOLEAN MODE)
         LIMIT 5)
        ORDER BY LEAST(
                         levenshtein(IFNULL(city, ''), #{keyword}),
                         levenshtein(IFNULL(municipality, ''), #{keyword}),
                         levenshtein(IFNULL(country, ''), #{keyword}),
                         levenshtein(IFNULL(county, ''), #{keyword})
                     )
    </select>

    <resultMap id="collectionObjectMap" type="com.travel.travelapi.models.CollectionObject">
        <id property="id" column="id"/>
        <discriminator javaType="string" column="type">
            <case value="place" resultType="com.travel.travelapi.models.CollectionObjectPlace"/>
            <case value="tour" resultType="com.travel.travelapi.models.CollectionObjectTour"/>
        </discriminator>
    </resultMap>


    <select id="selectObjectsByLocationAndCategory" resultMap="collectionObjectMap">
        (SELECT tour.tourId as id, 'tour' as type
         FROM TOUR tour
         WHERE tour.tourId IN (SELECT td.fk_tourId
                               FROM TOUR_DAY td
                                        RIGHT JOIN PLACE_TOUR_DAY ptd ON ptd.fk_tourDayId = td.tourDayId AND
                                                                         ptd.fk_placeId IN
                                                                         (SELECT placeId FROM PLACE WHERE ${locationType} = #{location}))
           AND tour.tourId IN (SELECT fk_tourId FROM CATEGORY_TOUR WHERE fk_categoryId = #{categoryId})
           AND tour.isPublished = 1
           AND tour.isVerified = 1)
        UNION ALL
        (SELECT placeId as id, 'place' as type
         FROM PLACE
         WHERE ${locationType} = #{location}
           AND placeId IN (SELECT fk_placeId FROM CATEGORY_PLACE WHERE fk_categoryId = #{categoryId})
           AND isPublic = 1
           and isVerified = 1)
    </select>

    <select id="selectObjectsByCoordsAndCategory" resultMap="collectionObjectMap">
        SELECT T.id, T.type
        FROM (SELECT place.placeId                                                     as id,
                     'place'                                                           as type,
                     (6371 * acos(cos(radians(#{latitude})) * cos(radians(latitude)) *
                                  cos(radians(longitude) - radians(#{longitude})) +
                                  sin(radians(#{latitude})) * sin(radians(latitude)))) as distance
              FROM PLACE place
              WHERE place.placeId IN (SELECT fk_placeId FROM CATEGORY_PLACE WHERE fk_categoryId = #{categoryId})
              UNION ALL
              (
                  SELECT td.fk_tourId as id, 'tour' as type, 0 as distance
                  FROM PLACE_TOUR_DAY ptd
                           INNER JOIN TOUR_DAY td ON td.tourDayId = ptd.fk_tourDayId
                  WHERE ptd.fk_placeId IN (SELECT fk_placeId FROM CATEGORY_PLACE WHERE fk_categoryId = #{categoryId})
                    AND (SELECT (6371 * acos(cos(radians(#{latitude})) * cos(radians(latitude)) *
                                             cos(radians(longitude) - radians(#{longitude})) +
                                             sin(radians(#{latitude})) * sin(radians(latitude))))
                         FROM PLACE
                         WHERE placeId = ptd.fk_placeId) &lt; #{distance}
              )) AS T
        WHERE distance &lt; #{distance}
        ORDER BY distance
    </select>

    <select id="averageCoordinatesForLocation" resultType="com.travel.travelapi.models.LatLng">
        SELECT AVG(latitude) as lat, AVG(longitude) as lon
        FROM PLACE
        WHERE ${locationType} = #{location};
    </select>

    <select id="previewCategories" resultType="com.travel.travelapi.models.search.CategoryAbstractionInfo">
        SELECT id as `categoryId`,
            ( SELECT COUNT(*) FROM placesByAbstractions WHERE categoryAbstractionId = categoryId
                <if test="request.distance != null and request.exploreLocation.type != 'country'">
                    AND getDistance(#{centerCoords.lat}, #{centerCoords.lon}, latitude, longitude) &lt; #{request.distance}
                </if>
                <if test="request.distance == null || request.exploreLocation.type == 'country'">
                    AND ${request.exploreLocation.type} = #{request.exploreLocation.location}
                </if>
                AND isPublic = true AND isVerified = true
                <if test="request.freePlacesOnly == true">
                    AND price = ''
                </if>
                    AND placeId NOT IN
                    (SELECT placeId FROM placesByAbstractions WHERE 1 != 1
                        <foreach collection="request.categoriesSelected" item="catSelected">
                                OR categoryAbstractionId = #{catSelected}
                        </foreach>
                    )
            ) as numPlaces
        FROM CATEGORY_ABSTRACTION
        WHERE 1 = 1
        <foreach collection="request.categoriesSelected" item="catSelected">
            AND id != #{catSelected}
        </foreach>
    </select>

    <select id="searchPlaces" resultType="com.travel.travelapi.models.PlaceLocal">
        SELECT name,
        averageTimeSpent,
        address,
        country,
        city,
        county,
        municipality,
        price,
        placeId,
        description,
        latitude,
        longitude,
        price
        FROM PLACE
        WHERE isVerified = true
        AND isPublic = true
          <if test="request.distance != null &amp;&amp; request.exploreLocation.type != 'country'">
              AND getDistance(#{centerCoords.lat}, #{centerCoords.lon}, latitude, longitude) &lt; #{request.distance}
          </if>
        <if test="request.distance == null || request.exploreLocation.type == 'country'">
            AND ${request.exploreLocation.type} = #{request.exploreLocation.location}
        </if>
        <if test="request.freePlacesOnly == true">
            AND price = ''
        </if>
        AND placeId IN (SELECT placeId FROM placesByAbstractions
        <if test="request.categoriesSelected.size() != 0">
            WHERE 1 != 1
            <foreach collection="request.categoriesSelected" item="cat">
                OR categoryAbstractionId = #{cat}
            </foreach>
        </if>
        )

    </select>

</mapper>